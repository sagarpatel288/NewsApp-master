apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.android.newsapp"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        buildTypes.each {
            it.buildConfigField 'String', 'API_KEY_GUARDIAN', API_KEY_GUARDIAN
        }
    }

    /*Note: You must configure data binding for app modules that depend on libraries that use data binding,
    even if the app module doesn't directly use data binding.
    Source: https://developer.android.com/topic/libraries/data-binding/start
    */
    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies { configuration ->
    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidSupportLibs(configuration)
    dataBinding(configuration)
    androidLifeCycleComponents(configuration)
    customViews(configuration)
    utils(configuration)
    implementation project(":common")
}

void androidSupportLibs(configurations) {
    //Native Android libraries
    configurations.implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    configurations.implementation "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
    configurations.implementation "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    configurations.implementation "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
    configurations.implementation 'com.android.support.constraint:constraint-layout:1.1.2'
}

void dataBinding(configurations) {
    //Butter knife for view binding
//    configurations.implementation "com.jakewharton:butterknife:$rootProject.ext.butterKnifeVersion"
//    configurations.annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterKnifeVersion"
    configurations.implementation "com.jakewharton:butterknife:$rootProject.ext.butterKnifeSnapshot"
    configurations.annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.butterKnifeSnapshot"
}

void androidLifeCycleComponents(configurations) {
    //Android architecture life cycle components
    configurations.implementation "android.arch.lifecycle:extensions:$rootProject.ext.lifeCycle"
    configurations.annotationProcessor "android.arch.lifecycle:compiler:$rootProject.ext.lifeCycle"
}

void customViews(configurations) {
    //Library to give any shape with elevation if possible to views
    configurations.implementation "com.github.florent37:shapeofview:$rootProject.ext.shapeOfView"
    //Circle image view with border, shadow and elevation
    configurations.implementation 'com.mikhaellopez:circularimageview:3.2.0'
}

void utils(configurations) {
//    configurations.implementation "com.github.bumptech.glide:glide:$rootProject.ext.glide"
//    configurations.annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.ext.glide"
    configurations.implementation 'com.ss.bannerslider:bannerslider:2.0.0'
    configurations.implementation 'com.android.support:multidex:1.0.3'
}
